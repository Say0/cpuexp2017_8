type token =
  | BOOL of (bool)
  | INT of (int)
  | FLOAT of (float)
  | NOT
  | MINUS
  | PLUS
  | AST
  | SLASH
  | MINUS_DOT
  | PLUS_DOT
  | AST_DOT
  | SLASH_DOT
  | EQUAL
  | LESS_GREATER
  | LESS_EQUAL
  | GREATER_EQUAL
  | LESS
  | GREATER
  | IF
  | THEN
  | ELSE
  | IDENT of (Id.t)
  | LET
  | IN
  | REC
  | COMMA
  | ARRAY_CREATE
  | PRINT_INT
  | PRINT_FLOAT
  | PRINT_CHAR
  | READ_INT
  | READ_FLOAT
  | DOT
  | LESS_MINUS
  | SEMICOLON
  | LPAREN
  | RPAREN
  | LINEBREAK
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(* parserが利用する変数、関数、型などの定義 *)
open Syntax
let addtyp x = (x, Type.gentyp ())
let linenumber = ref 0 ;;
Parsing.set_trace false
# 51 "parser.ml"
let yytransl_const = [|
  260 (* NOT *);
  261 (* MINUS *);
  262 (* PLUS *);
  263 (* AST *);
  264 (* SLASH *);
  265 (* MINUS_DOT *);
  266 (* PLUS_DOT *);
  267 (* AST_DOT *);
  268 (* SLASH_DOT *);
  269 (* EQUAL *);
  270 (* LESS_GREATER *);
  271 (* LESS_EQUAL *);
  272 (* GREATER_EQUAL *);
  273 (* LESS *);
  274 (* GREATER *);
  275 (* IF *);
  276 (* THEN *);
  277 (* ELSE *);
  279 (* LET *);
  280 (* IN *);
  281 (* REC *);
  282 (* COMMA *);
  283 (* ARRAY_CREATE *);
  284 (* PRINT_INT *);
  285 (* PRINT_FLOAT *);
  286 (* PRINT_CHAR *);
  287 (* READ_INT *);
  288 (* READ_FLOAT *);
  289 (* DOT *);
  290 (* LESS_MINUS *);
  291 (* SEMICOLON *);
  292 (* LPAREN *);
  293 (* RPAREN *);
  294 (* LINEBREAK *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* BOOL *);
  258 (* INT *);
  259 (* FLOAT *);
  278 (* IDENT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\003\000\007\000\007\000\004\000\004\000\005\000\005\000\006\000\
\006\000\000\000"

let yylen = "\002\000\
\003\000\002\000\001\000\001\000\001\000\001\000\005\000\001\000\
\002\000\002\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\006\000\002\000\003\000\003\000\
\003\000\003\000\006\000\005\000\002\000\001\000\008\000\007\000\
\003\000\003\000\002\000\002\000\002\000\002\000\002\000\001\000\
\004\000\002\000\001\000\002\000\001\000\003\000\003\000\003\000\
\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\040\000\003\000\004\000\005\000\000\000\000\000\
\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\009\000\010\000\
\022\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\001\000\000\000\000\000\013\000\014\000\000\000\000\000\
\025\000\026\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\042\000\000\000\000\000\049\000\048\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\007\000\000\000\000\000\
\000\000\000\000"

let yydgoto = "\002\000\
\020\000\021\000\061\000\056\000\022\000\063\000\089\000"

let yysindex = "\003\000\
\153\255\000\000\000\000\000\000\000\000\000\000\153\255\153\255\
\153\255\153\255\000\000\234\254\071\255\071\255\071\255\071\255\
\071\255\071\255\115\255\130\003\034\255\235\254\000\000\000\000\
\000\000\006\003\249\254\241\254\242\254\061\255\240\254\240\254\
\240\254\240\254\240\254\000\000\185\255\153\255\153\255\153\255\
\153\255\153\255\153\255\153\255\153\255\153\255\153\255\153\255\
\153\255\153\255\153\255\153\255\153\255\238\254\240\254\071\255\
\153\255\153\255\153\255\006\255\005\255\007\255\232\254\251\254\
\240\254\000\000\008\255\008\255\000\000\000\000\008\255\008\255\
\000\000\000\000\120\255\120\255\120\255\120\255\120\255\120\255\
\183\003\130\003\153\255\240\254\183\003\037\003\068\003\006\255\
\019\255\153\255\012\255\035\255\045\255\153\255\218\255\153\255\
\153\255\000\000\153\255\130\003\000\000\000\000\153\255\229\002\
\032\255\161\003\130\003\130\003\099\003\000\000\153\255\153\255\
\161\003\130\003"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\068\000\108\000\127\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\141\000\174\000\
\207\000\240\000\020\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\038\000\057\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\094\001\000\000\160\001\193\001\000\000\000\000\226\001\003\002\
\000\000\000\000\039\002\076\002\113\002\146\002\171\002\196\002\
\011\002\135\001\000\000\075\000\047\002\000\000\000\000\056\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\168\001\000\000\000\000\000\000\000\000\
\001\000\084\002\201\001\047\255\000\000\000\000\000\000\000\000\
\121\002\234\001"

let yygindex = "\000\000\
\002\000\009\000\000\000\000\000\000\000\000\000\244\255"

let yytablesize = 1225
let yytable = "\027\000\
\007\000\092\000\028\000\001\000\057\000\059\000\060\000\062\000\
\023\000\024\000\025\000\026\000\093\000\029\000\040\000\041\000\
\064\000\083\000\044\000\045\000\037\000\030\000\031\000\032\000\
\033\000\034\000\035\000\088\000\090\000\055\000\094\000\099\000\
\091\000\101\000\004\000\005\000\006\000\045\000\065\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\076\000\077\000\078\000\079\000\080\000\081\000\082\000\011\000\
\102\000\103\000\085\000\086\000\087\000\004\000\005\000\006\000\
\084\000\111\000\054\000\050\000\043\000\019\000\041\000\004\000\
\005\000\006\000\044\000\098\000\000\000\000\000\000\000\000\000\
\000\000\000\000\011\000\000\000\095\000\000\000\000\000\000\000\
\000\000\000\000\000\000\100\000\011\000\064\000\000\000\104\000\
\019\000\106\000\107\000\000\000\108\000\000\000\000\000\000\000\
\109\000\000\000\019\000\008\000\000\000\000\000\000\000\000\000\
\113\000\114\000\003\000\004\000\005\000\006\000\007\000\008\000\
\000\000\000\000\000\000\009\000\038\000\039\000\040\000\041\000\
\042\000\043\000\044\000\045\000\000\000\010\000\000\000\000\000\
\011\000\012\000\000\000\000\000\035\000\013\000\014\000\015\000\
\016\000\017\000\018\000\000\000\000\000\000\000\019\000\036\000\
\003\000\004\000\005\000\006\000\007\000\008\000\000\000\000\000\
\000\000\009\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\010\000\000\000\036\000\011\000\012\000\
\000\000\000\000\000\000\013\000\014\000\015\000\016\000\017\000\
\018\000\000\000\000\000\000\000\019\000\038\000\039\000\040\000\
\041\000\042\000\043\000\044\000\045\000\046\000\047\000\048\000\
\049\000\050\000\051\000\000\000\000\000\000\000\037\000\000\000\
\000\000\000\000\052\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\053\000\000\000\066\000\038\000\039\000\
\040\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\
\048\000\049\000\050\000\051\000\000\000\000\000\000\000\038\000\
\000\000\000\000\000\000\052\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\053\000\000\000\105\000\000\000\
\000\000\007\000\007\000\007\000\000\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\039\000\007\000\007\000\007\000\000\000\
\007\000\000\000\007\000\000\000\000\000\000\000\000\000\000\000\
\000\000\007\000\000\000\007\000\007\000\007\000\045\000\045\000\
\045\000\000\000\045\000\045\000\045\000\045\000\045\000\045\000\
\045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
\029\000\045\000\045\000\045\000\000\000\045\000\000\000\045\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\045\000\045\000\045\000\044\000\044\000\044\000\000\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\034\000\044\000\044\000\
\044\000\000\000\044\000\000\000\044\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\044\000\044\000\044\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\030\000\008\000\
\008\000\000\000\000\000\008\000\000\000\008\000\033\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\008\000\000\000\
\008\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\035\000\035\000\012\000\
\035\000\035\000\000\000\000\000\035\000\000\000\035\000\028\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\035\000\
\000\000\035\000\036\000\036\000\036\000\036\000\036\000\036\000\
\036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
\011\000\036\000\036\000\000\000\000\000\036\000\000\000\036\000\
\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\036\000\000\000\036\000\037\000\037\000\037\000\037\000\037\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\024\000\037\000\037\000\000\000\000\000\037\000\000\000\
\037\000\031\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\037\000\000\000\037\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\023\000\038\000\038\000\000\000\000\000\038\000\
\000\000\038\000\047\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\038\000\000\000\038\000\000\000\000\000\000\000\
\039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\039\000\039\000\015\000\039\000\
\039\000\000\000\000\000\039\000\000\000\039\000\046\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\039\000\000\000\
\039\000\000\000\000\000\000\000\000\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\016\000\029\000\029\000\000\000\000\000\
\029\000\000\000\029\000\021\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\029\000\000\000\029\000\000\000\000\000\
\000\000\000\000\034\000\034\000\034\000\034\000\034\000\034\000\
\034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
\019\000\034\000\034\000\000\000\000\000\034\000\000\000\034\000\
\032\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\034\000\000\000\034\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\020\000\030\000\030\000\000\000\000\000\030\000\000\000\
\000\000\000\000\033\000\033\000\000\000\000\000\033\000\000\000\
\000\000\030\000\000\000\030\000\012\000\012\000\000\000\000\000\
\012\000\012\000\017\000\033\000\012\000\012\000\012\000\012\000\
\012\000\012\000\000\000\012\000\012\000\000\000\000\000\012\000\
\000\000\012\000\000\000\028\000\028\000\000\000\000\000\028\000\
\000\000\000\000\012\000\018\000\012\000\011\000\011\000\000\000\
\000\000\011\000\011\000\000\000\028\000\011\000\011\000\011\000\
\011\000\011\000\011\000\000\000\011\000\011\000\000\000\000\000\
\011\000\000\000\011\000\000\000\027\000\027\000\000\000\000\000\
\027\000\000\000\000\000\011\000\000\000\011\000\024\000\024\000\
\000\000\000\000\024\000\024\000\000\000\027\000\024\000\024\000\
\024\000\024\000\024\000\024\000\000\000\024\000\024\000\000\000\
\000\000\024\000\000\000\024\000\000\000\031\000\031\000\000\000\
\000\000\031\000\000\000\000\000\024\000\000\000\024\000\023\000\
\023\000\000\000\000\000\023\000\023\000\000\000\031\000\023\000\
\023\000\023\000\023\000\023\000\023\000\000\000\023\000\023\000\
\000\000\000\000\023\000\000\000\023\000\000\000\047\000\047\000\
\000\000\000\000\047\000\000\000\047\000\023\000\000\000\023\000\
\000\000\000\000\000\000\000\000\000\000\047\000\000\000\047\000\
\000\000\000\000\000\000\015\000\015\000\015\000\015\000\015\000\
\015\000\000\000\015\000\015\000\000\000\000\000\015\000\000\000\
\015\000\000\000\046\000\046\000\000\000\000\000\046\000\000\000\
\046\000\015\000\000\000\015\000\000\000\000\000\000\000\000\000\
\000\000\046\000\000\000\046\000\000\000\000\000\000\000\000\000\
\016\000\016\000\016\000\016\000\016\000\016\000\000\000\016\000\
\016\000\000\000\000\000\016\000\000\000\016\000\000\000\021\000\
\021\000\000\000\000\000\021\000\000\000\000\000\016\000\000\000\
\016\000\000\000\000\000\000\000\000\000\000\000\021\000\000\000\
\021\000\000\000\000\000\000\000\000\000\019\000\019\000\019\000\
\019\000\019\000\019\000\000\000\019\000\019\000\000\000\000\000\
\019\000\000\000\019\000\000\000\032\000\032\000\000\000\000\000\
\032\000\000\000\000\000\019\000\000\000\019\000\000\000\000\000\
\000\000\000\000\000\000\032\000\000\000\032\000\020\000\020\000\
\020\000\020\000\020\000\020\000\000\000\020\000\020\000\000\000\
\000\000\020\000\000\000\020\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\020\000\000\000\020\000\017\000\
\017\000\017\000\017\000\017\000\017\000\000\000\017\000\017\000\
\000\000\000\000\017\000\000\000\017\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\017\000\000\000\017\000\
\018\000\018\000\018\000\018\000\018\000\018\000\000\000\018\000\
\018\000\000\000\000\000\018\000\000\000\018\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\018\000\000\000\
\018\000\038\000\039\000\040\000\041\000\042\000\043\000\044\000\
\045\000\046\000\047\000\048\000\049\000\050\000\051\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\052\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\053\000\
\000\000\110\000\038\000\039\000\040\000\041\000\042\000\043\000\
\044\000\045\000\046\000\047\000\048\000\049\000\050\000\051\000\
\000\000\058\000\000\000\000\000\000\000\000\000\000\000\052\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\053\000\038\000\039\000\040\000\041\000\042\000\043\000\044\000\
\045\000\046\000\047\000\048\000\049\000\050\000\051\000\000\000\
\000\000\096\000\000\000\000\000\000\000\000\000\052\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\053\000\
\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\
\046\000\047\000\048\000\049\000\050\000\051\000\000\000\000\000\
\000\000\000\000\000\000\097\000\000\000\052\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\053\000\038\000\
\039\000\040\000\041\000\042\000\043\000\044\000\045\000\046\000\
\047\000\048\000\049\000\050\000\051\000\000\000\000\000\000\000\
\000\000\000\000\112\000\000\000\052\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\053\000\038\000\039\000\
\040\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\
\048\000\049\000\050\000\051\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\052\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\053\000\038\000\039\000\040\000\
\041\000\042\000\043\000\044\000\045\000\046\000\047\000\048\000\
\049\000\050\000\051\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\052\000\038\000\039\000\040\000\041\000\042\000\
\043\000\044\000\045\000\046\000\047\000\048\000\049\000\050\000\
\051\000"

let yycheck = "\022\001\
\000\000\026\001\025\001\001\000\026\001\013\001\022\001\022\001\
\007\000\008\000\009\000\010\000\037\001\036\001\007\001\008\001\
\033\001\036\001\011\001\012\001\019\000\013\000\014\000\015\000\
\016\000\017\000\018\000\022\001\024\001\021\000\036\001\013\001\
\026\001\022\001\001\001\002\001\003\001\000\000\030\000\038\000\
\039\000\040\000\041\000\042\000\043\000\044\000\045\000\046\000\
\047\000\048\000\049\000\050\000\051\000\052\000\053\000\022\001\
\022\001\013\001\057\000\058\000\059\000\001\001\002\001\003\001\
\056\000\034\001\033\001\000\000\013\001\036\001\024\001\001\001\
\002\001\003\001\000\000\088\000\255\255\255\255\255\255\255\255\
\255\255\255\255\022\001\255\255\083\000\255\255\255\255\255\255\
\255\255\255\255\255\255\090\000\022\001\033\001\255\255\094\000\
\036\001\096\000\097\000\255\255\099\000\255\255\255\255\255\255\
\103\000\255\255\036\001\000\000\255\255\255\255\255\255\255\255\
\111\000\112\000\000\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\255\255\009\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\255\255\019\001\255\255\255\255\
\022\001\023\001\255\255\255\255\000\000\027\001\028\001\029\001\
\030\001\031\001\032\001\255\255\255\255\255\255\036\001\037\001\
\000\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\255\255\009\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\019\001\255\255\000\000\022\001\023\001\
\255\255\255\255\255\255\027\001\028\001\029\001\030\001\031\001\
\032\001\255\255\255\255\255\255\036\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\026\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\035\001\255\255\037\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\255\255\000\000\
\255\255\255\255\255\255\026\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\035\001\255\255\037\001\255\255\
\255\255\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\000\000\020\001\021\001\022\001\255\255\
\024\001\255\255\026\001\255\255\255\255\255\255\255\255\255\255\
\255\255\033\001\255\255\035\001\036\001\037\001\001\001\002\001\
\003\001\255\255\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\000\000\020\001\021\001\022\001\255\255\024\001\255\255\026\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\035\001\036\001\037\001\001\001\002\001\003\001\255\255\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\000\000\020\001\021\001\
\022\001\255\255\024\001\255\255\026\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\035\001\036\001\037\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\000\000\020\001\
\021\001\255\255\255\255\024\001\255\255\026\001\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\035\001\255\255\
\037\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\000\000\
\020\001\021\001\255\255\255\255\024\001\255\255\026\001\000\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\035\001\
\255\255\037\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\000\000\020\001\021\001\255\255\255\255\024\001\255\255\026\001\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\035\001\255\255\037\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\000\000\020\001\021\001\255\255\255\255\024\001\255\255\
\026\001\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\035\001\255\255\037\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\000\000\020\001\021\001\255\255\255\255\024\001\
\255\255\026\001\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\035\001\255\255\037\001\255\255\255\255\255\255\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\000\000\020\001\
\021\001\255\255\255\255\024\001\255\255\026\001\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\035\001\255\255\
\037\001\255\255\255\255\255\255\255\255\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\000\000\020\001\021\001\255\255\255\255\
\024\001\255\255\026\001\000\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\035\001\255\255\037\001\255\255\255\255\
\255\255\255\255\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\000\000\020\001\021\001\255\255\255\255\024\001\255\255\026\001\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\035\001\255\255\037\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\000\000\020\001\021\001\255\255\255\255\024\001\255\255\
\255\255\255\255\020\001\021\001\255\255\255\255\024\001\255\255\
\255\255\035\001\255\255\037\001\005\001\006\001\255\255\255\255\
\009\001\010\001\000\000\037\001\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\020\001\021\001\255\255\255\255\024\001\
\255\255\026\001\255\255\020\001\021\001\255\255\255\255\024\001\
\255\255\255\255\035\001\000\000\037\001\005\001\006\001\255\255\
\255\255\009\001\010\001\255\255\037\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\020\001\021\001\255\255\255\255\
\024\001\255\255\026\001\255\255\020\001\021\001\255\255\255\255\
\024\001\255\255\255\255\035\001\255\255\037\001\005\001\006\001\
\255\255\255\255\009\001\010\001\255\255\037\001\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\020\001\021\001\255\255\
\255\255\024\001\255\255\026\001\255\255\020\001\021\001\255\255\
\255\255\024\001\255\255\255\255\035\001\255\255\037\001\005\001\
\006\001\255\255\255\255\009\001\010\001\255\255\037\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\020\001\021\001\
\255\255\255\255\024\001\255\255\026\001\255\255\020\001\021\001\
\255\255\255\255\024\001\255\255\026\001\035\001\255\255\037\001\
\255\255\255\255\255\255\255\255\255\255\035\001\255\255\037\001\
\255\255\255\255\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\020\001\021\001\255\255\255\255\024\001\255\255\
\026\001\255\255\020\001\021\001\255\255\255\255\024\001\255\255\
\026\001\035\001\255\255\037\001\255\255\255\255\255\255\255\255\
\255\255\035\001\255\255\037\001\255\255\255\255\255\255\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\020\001\
\021\001\255\255\255\255\024\001\255\255\026\001\255\255\020\001\
\021\001\255\255\255\255\024\001\255\255\255\255\035\001\255\255\
\037\001\255\255\255\255\255\255\255\255\255\255\035\001\255\255\
\037\001\255\255\255\255\255\255\255\255\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\020\001\021\001\255\255\255\255\
\024\001\255\255\026\001\255\255\020\001\021\001\255\255\255\255\
\024\001\255\255\255\255\035\001\255\255\037\001\255\255\255\255\
\255\255\255\255\255\255\035\001\255\255\037\001\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\020\001\021\001\255\255\
\255\255\024\001\255\255\026\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\035\001\255\255\037\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\020\001\021\001\
\255\255\255\255\024\001\255\255\026\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\035\001\255\255\037\001\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\020\001\
\021\001\255\255\255\255\024\001\255\255\026\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\035\001\255\255\
\037\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\026\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\035\001\
\255\255\037\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\255\255\020\001\255\255\255\255\255\255\255\255\255\255\026\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\035\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\255\255\021\001\255\255\255\255\255\255\255\255\026\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\035\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\255\255\
\255\255\255\255\255\255\024\001\255\255\026\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\035\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\255\255\255\255\
\255\255\255\255\024\001\255\255\026\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\035\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\026\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\035\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\026\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001"

let yynames_const = "\
  NOT\000\
  MINUS\000\
  PLUS\000\
  AST\000\
  SLASH\000\
  MINUS_DOT\000\
  PLUS_DOT\000\
  AST_DOT\000\
  SLASH_DOT\000\
  EQUAL\000\
  LESS_GREATER\000\
  LESS_EQUAL\000\
  GREATER_EQUAL\000\
  LESS\000\
  GREATER\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  IN\000\
  REC\000\
  COMMA\000\
  ARRAY_CREATE\000\
  PRINT_INT\000\
  PRINT_FLOAT\000\
  PRINT_CHAR\000\
  READ_INT\000\
  READ_FLOAT\000\
  DOT\000\
  LESS_MINUS\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  LINEBREAK\000\
  EOF\000\
  "

let yynames_block = "\
  BOOL\000\
  INT\000\
  FLOAT\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 74 "parser.mly"
    ( _2 )
# 537 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "parser.mly"
    ( Unit )
# 543 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 78 "parser.mly"
    ( Bool(_1) )
# 550 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 80 "parser.mly"
    ( Int(_1) )
# 557 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 82 "parser.mly"
    ( Float(_1) )
# 564 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 84 "parser.mly"
    ( Var(_1) )
# 571 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 86 "parser.mly"
    ( Get(_1, _4) )
# 579 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 90 "parser.mly"
    ( _1 )
# 586 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 93 "parser.mly"
    ( Not(_2) )
# 593 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 96 "parser.mly"
    ( match _2 with
    | Float(f) -> Float(-.f) (* -1.23などは型エラーではないので別扱い *)
    | e -> Neg(e) )
# 602 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 100 "parser.mly"
    ( Add(_1, _3) )
# 610 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 102 "parser.mly"
    ( Sub(_1, _3) )
# 618 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 104 "parser.mly"
    ( Mul(_1, _3) )
# 626 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 106 "parser.mly"
    ( Div(_1, _3) )
# 634 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 108 "parser.mly"
    ( Eq(_1, _3) )
# 642 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 110 "parser.mly"
    ( Not(Eq(_1, _3)) )
# 650 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 112 "parser.mly"
    ( Not(LE(_3, _1)) )
# 658 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 114 "parser.mly"
    ( Not(LE(_1, _3)) )
# 666 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 116 "parser.mly"
    ( LE(_1, _3) )
# 674 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 118 "parser.mly"
    ( LE(_3, _1) )
# 682 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 121 "parser.mly"
    ( If(_2, _4, _6) )
# 691 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 124 "parser.mly"
    ( FNeg(_2) )
# 698 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 126 "parser.mly"
    ( FAdd(_1, _3) )
# 706 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 128 "parser.mly"
    ( FSub(_1, _3) )
# 714 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 130 "parser.mly"
    ( FMul(_1, _3) )
# 722 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 132 "parser.mly"
    ( FDiv(_1, _3) )
# 730 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 135 "parser.mly"
    ( Let(addtyp _2, _4, _6) )
# 739 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fundef) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 138 "parser.mly"
    ( LetRec(_3, _5) )
# 747 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actual_args) in
    Obj.repr(
# 141 "parser.mly"
    ( App(_1, _2) )
# 755 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'elems) in
    Obj.repr(
# 144 "parser.mly"
    ( Tuple(_1) )
# 762 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'pat) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 146 "parser.mly"
    ( LetTuple(_3, _6, _8) )
# 771 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Syntax.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 148 "parser.mly"
    ( Put(_1, _4, _7) )
# 780 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 150 "parser.mly"
    ( Let((Id.gentmp Type.Unit, Type.Unit), _1, _3) )
# 788 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 153 "parser.mly"
    ( Array(_2, _3) )
# 796 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 155 "parser.mly"
    ( Print_int(_2) )
# 803 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 157 "parser.mly"
    ( Print_float(_2) )
# 810 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 159 "parser.mly"
    ( Print_char(_2) )
# 817 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 161 "parser.mly"
    ( Read_int(_2) )
# 824 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 163 "parser.mly"
    ( Read_float(_2) )
# 831 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 165 "parser.mly"
    ( failwith
        (Printf.sprintf "parse error near characters %d-%d on line %d"
           (Parsing.symbol_start ())
           (Parsing.symbol_end ())
           ((Parsing.symbol_start_pos ()).pos_lnum)) )
# 841 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'formal_args) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 173 "parser.mly"
    ( { name = addtyp _1; args = _2; body = _4 } )
# 850 "parser.ml"
               : 'fundef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'formal_args) in
    Obj.repr(
# 177 "parser.mly"
    ( addtyp _1 :: _2 )
# 858 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 179 "parser.mly"
    ( [addtyp _1] )
# 865 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'actual_args) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 184 "parser.mly"
    ( _1 @ [_2] )
# 873 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 187 "parser.mly"
    ( [_1] )
# 880 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elems) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 191 "parser.mly"
    ( _1 @ [_3] )
# 888 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 193 "parser.mly"
    ( [_1; _3] )
# 896 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 197 "parser.mly"
    ( _1 @ [addtyp _3] )
# 904 "parser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Id.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 199 "parser.mly"
    ( [addtyp _1; addtyp _3] )
# 912 "parser.ml"
               : 'pat))
(* Entry exp *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let exp (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.t)
